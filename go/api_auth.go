/*
 * Tiny tracker
 *
 * Tiny tracker server API
 *
 * API version: 1.0.0
 * Contact: anmi.asm@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	// "github.com/gorilla/mux"
)

// AuthApiController binds http requests to an api service and writes the service results to the http response
type AuthApiController struct {
	service      AuthApiServicer
	errorHandler ErrorHandler
}

// AuthApiOption for how the controller is set up.
type AuthApiOption func(*AuthApiController)

// WithAuthApiErrorHandler inject ErrorHandler into controller
func WithAuthApiErrorHandler(h ErrorHandler) AuthApiOption {
	return func(c *AuthApiController) {
		c.errorHandler = h
	}
}

// NewAuthApiController creates a default api controller
func NewAuthApiController(s AuthApiServicer, opts ...AuthApiOption) Router {
	controller := &AuthApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthApiController
func (c *AuthApiController) Routes() Routes {
	return Routes{
		{
			"GetCurrentUser",
			strings.ToUpper("Get"),
			"/v1/auth/user",
			c.GetCurrentUser,
		},
		{
			"LogOut",
			strings.ToUpper("Delete"),
			"/v1/auth/session",
			c.LogOut,
		},
		{
			"SignIn",
			strings.ToUpper("Post"),
			"/v1/auth/session",
			c.SignIn,
		},
		{
			"SignUp",
			strings.ToUpper("Post"),
			"/v1/auth/user",
			c.SignUp,
		},
	}
}

// GetCurrentUser -
func (c *AuthApiController) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCurrentUser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// LogOut -
func (c *AuthApiController) LogOut(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.LogOut(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SignIn -
func (c *AuthApiController) SignIn(w http.ResponseWriter, r *http.Request) {
	signInFormParam := SignInForm{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&signInFormParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSignInFormRequired(signInFormParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SignIn(r.Context(), signInFormParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SignUp -
func (c *AuthApiController) SignUp(w http.ResponseWriter, r *http.Request) {
	signUpFormParam := SignUpForm{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&signUpFormParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSignUpFormRequired(signUpFormParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SignUp(r.Context(), signUpFormParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
